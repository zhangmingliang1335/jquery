黑马视频基础：day6开始


重点：面向对象 ，集合  ，I/O

A.多态的前提
		a.事物存在的多种形态

B.多态前提

		a.要有继承关系
		b.要有方法重写
		c.要有父类引用指向子类对象
C.案例演示：
		class Demo_1{

			public static void main(Strign[] args){
				Father f = new Son() // 父类引用指向子类对象
				f.num = 10 //为什么会等于10，运行规则是编译左边，输出也是看左边（成员变量）
					
				f.print()  //输出 son  为什么会等于son，运行规则是编译左边，输出看右边（成员方法，动态绑定）
						//静态方法是与成员变量是一样的，谁调用就是看谁的输出（static method）  
			
}
		}
		class Father{
			int num = 10 ;
			public void print(){
				system.out.println("father")
			}
		}
		class Son Extends Father{
			int num = 20
			public void print(){
				system.out.println("son")
			}
		}
D:多态向转型
		a.父类引用指向子类对象 就是向上转型 Father father = new Son() 
		b.父类引用指向子类对象 就是向下转型 (Son)Father father = new Son
E：多态的好处与弊端：
		a.提高代码的维护性(继承性)
		b.提高代码的扩展性（有多态保证）
		c.弊端 父类不能使用子类的变量和方法
F: instance of :
		a.判断该类型是否一致(有继承关系)

G:抽象类：
	a.就是看不懂的类
	b.用关键字 abstarct 修饰类 public abstarct void eat()修饰方法，没有打括号及方法体{ }
	c.不能实例化 ，可以使用父类引用指向子类对象,但是子类必须全部重写父类抽象方法，或者子类位抽象类
	d.不能修饰成员变量,成员变量既可以是变量也可以是常量
	e.成员方法既可以是抽象的，也可以是非抽象的（提高代码的复用性）
	f.不能与static ，final 公用；
		a.final修饰的方法不能被重写，而abstract修饰的方法必须重写
		b.static修饰是类名可以直接调用，而抽象不行
